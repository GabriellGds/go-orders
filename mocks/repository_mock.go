// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen --source=internal/repository/repository.go -destination=mocks/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/GabriellGds/go-orders/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateItemRepository mocks base method.
func (m *MockRepositoryInterface) CreateItemRepository(arg0 context.Context, arg1 *models.Item) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemRepository", arg0, arg1)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItemRepository indicates an expected call of CreateItemRepository.
func (mr *MockRepositoryInterfaceMockRecorder) CreateItemRepository(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateItemRepository), arg0, arg1)
}

// CreateOrderRepository mocks base method.
func (m *MockRepositoryInterface) CreateOrderRepository(ctx context.Context, order *models.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderRepository", ctx, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderRepository indicates an expected call of CreateOrderRepository.
func (mr *MockRepositoryInterfaceMockRecorder) CreateOrderRepository(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateOrderRepository), ctx, order)
}

// CreateUserRepository mocks base method.
func (m *MockRepositoryInterface) CreateUserRepository(ctx context.Context, user models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRepository", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRepository indicates an expected call of CreateUserRepository.
func (mr *MockRepositoryInterfaceMockRecorder) CreateUserRepository(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateUserRepository), ctx, user)
}

// DeleteItemRepository mocks base method.
func (m *MockRepositoryInterface) DeleteItemRepository(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemRepository", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemRepository indicates an expected call of DeleteItemRepository.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteItemRepository(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteItemRepository), ctx, id)
}

// DeleteOrderRepository mocks base method.
func (m *MockRepositoryInterface) DeleteOrderRepository(ctx context.Context, orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderRepository", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderRepository indicates an expected call of DeleteOrderRepository.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteOrderRepository(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteOrderRepository), ctx, orderID)
}

// DeleteUserRepository mocks base method.
func (m *MockRepositoryInterface) DeleteUserRepository(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRepository", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRepository indicates an expected call of DeleteUserRepository.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteUserRepository(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteUserRepository), ctx, id)
}

// FindItemRepository mocks base method.
func (m *MockRepositoryInterface) FindItemRepository(ctx context.Context, id int) (models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindItemRepository", ctx, id)
	ret0, _ := ret[0].(models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindItemRepository indicates an expected call of FindItemRepository.
func (mr *MockRepositoryInterfaceMockRecorder) FindItemRepository(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindItemRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).FindItemRepository), ctx, id)
}

// FindOrderRepository mocks base method.
func (m *MockRepositoryInterface) FindOrderRepository(ctx context.Context, orderID int) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderRepository", ctx, orderID)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderRepository indicates an expected call of FindOrderRepository.
func (mr *MockRepositoryInterfaceMockRecorder) FindOrderRepository(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).FindOrderRepository), ctx, orderID)
}

// FindUserByEmailRepository mocks base method.
func (m *MockRepositoryInterface) FindUserByEmailRepository(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmailRepository", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmailRepository indicates an expected call of FindUserByEmailRepository.
func (mr *MockRepositoryInterfaceMockRecorder) FindUserByEmailRepository(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmailRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).FindUserByEmailRepository), ctx, email)
}

// FindUserRepository mocks base method.
func (m *MockRepositoryInterface) FindUserRepository(ctx context.Context, id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserRepository", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserRepository indicates an expected call of FindUserRepository.
func (mr *MockRepositoryInterfaceMockRecorder) FindUserRepository(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).FindUserRepository), ctx, id)
}

// ItemsRepository mocks base method.
func (m *MockRepositoryInterface) ItemsRepository(ctx context.Context) ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemsRepository", ctx)
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemsRepository indicates an expected call of ItemsRepository.
func (mr *MockRepositoryInterfaceMockRecorder) ItemsRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemsRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).ItemsRepository), ctx)
}

// ListUserRepository mocks base method.
func (m *MockRepositoryInterface) ListUserRepository(ctx context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserRepository", ctx)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserRepository indicates an expected call of ListUserRepository.
func (mr *MockRepositoryInterfaceMockRecorder) ListUserRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).ListUserRepository), ctx)
}

// UpdateItemRepository mocks base method.
func (m *MockRepositoryInterface) UpdateItemRepository(ctx context.Context, id int, item *models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemRepository", ctx, id, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemRepository indicates an expected call of UpdateItemRepository.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateItemRepository(ctx, id, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateItemRepository), ctx, id, item)
}

// UpdateUserRepository mocks base method.
func (m *MockRepositoryInterface) UpdateUserRepository(ctx context.Context, id int, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRepository", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRepository indicates an expected call of UpdateUserRepository.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateUserRepository(ctx, id, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRepository", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateUserRepository), ctx, id, user)
}
